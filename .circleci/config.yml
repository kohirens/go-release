version: 2.1

orbs:
    vro: kohirens/version-release@dev:alpha

filter-semantic-tag: &filter-semantic-tag
    tags:
        only: /^v?\d+\.\d+\.\d+$/
    branches:
        ignore: /.*/

executors:
    image-builder:
        docker: # see https://circleci.com/docs/building-docker-images/#docker-version
            - image: cimg/base:current
              auth:
                  username: ${DH_USER}
                  password: ${DH_PASS}
        resource_class: small

parameters:
    app_name:
        default: "go-release"
        type: string
    ctx_auto_release:
        default: kohirens-automation
        description: CircleCI context containing automation secrets.
        type: string
    ctx_docker:
        default: kohirens-automation-dockerhub
        description: CircleCI context containing Docker Hub secrets.
        type: string
    image_repo:
        default: kohirens/go-release
        description: Docker image repository
        type: string
    ssh_finger:
        default: "08:ea:92:c4:12:9f:bc:88:2a:69:2b:83:58:13:bc:00"
        description: SSH fingerprint.
        type: string
    triggered_flow:
        default: "workflow-selector"
        description: Indicates with workflow should run.
        type: string
    exec_img_tag:
        default: "latest"
        type: string

jobs:
    co:
        executor: image-builder
        steps:
            - add_ssh_keys:
                fingerprints:
                    - << pipeline.parameters.ssh_finger >>
            - checkout
            - persist_to_workspace:
                root: .
                paths: [ . ]

    run-test:
        docker:
            - image: cimg/go:1.20
        steps:
            - attach_workspace: { at: "." }
            - restore_cache:
                keys:
                    - go-mod-v1-{{ checksum "go.mod" }}
            - run:
                name: Install Dependencies
                command: go mod tidy
            - save_cache:
                key: go-mod-v1-{{ checksum "go.mod" }}
                paths:
                    - "/home/circleci/go/pkg/mod"
                    - "/go/pkg/mod"
            - run:
                  name: Run tests
                  command: |
                      go test ./...
            - persist_to_workspace:
                root: .
                paths: [ ./* ]

    run-img-test:
        executor: image-builder
        steps:
            - attach_workspace: { at: "." }
            - setup_remote_docker:
                  docker_layer_caching: true
            - run:
                  name: Build image and run test
                  command: |
                      docker build --rm \
                          -f .docker/go-release/Dockerfile \
                          -t go-release:alpha \
                          --progress plain \
                          --target "release" .
                      docker run --rm --entrypoint go go-release:alpha version
                      docker run --rm go-release:alpha -version
                      docker rmi go-release:alpha

    publish-execs:
        parameters:
            app_name:
                type: string
            build_tag:
                default: << pipeline.git.tag >>
                type: string
        docker:
            - image: kohirens/circleci-go:0.4.1
              auth:
                  username: ${DH_USER}
                  password: ${DH_PASS}
        steps:
            - attach_workspace: { at: "." }
            - run:
                name: Build go-release
                command: |
                    go generate
                    go build
            - run:
                name: Build and publish executables
                command: |
                    echo "Publishing GitHub release '<< parameters.build_tag >>' assets"
                    src_dir=.
                    go generate "${src_dir}"
                    ./go-release build \
                        "${src_dir}" \
                        "<< parameters.app_name >>" \
                        "<< parameters.build_tag >>" \
                        "kohirens" \
                        "go-release" \
                        "${GH_TOKEN}"

    publish-image:
        parameters:
            ver_tag:
                default: "latest"
                type: string
            image_repo:
                type: string
            docker_file:
                type: string
        environment:
            DOCKER_BUILDKIT: 1
        executor: image-builder
        steps:
            - attach_workspace: { at: "." }
            - setup_remote_docker:
                  docker_layer_caching: true
            - run:
                name: Build and push image
                command: |
                    export BUILD_VER="<<parameters.ver_tag>>"
                    if [ -z "${BUILD_VER}" ]; then
                        echo "ver_tag parameters is not set, or is empty"
                        exit 1
                    fi
                    export DH_IMAGE="<<parameters.image_repo>>"
                    echo "${DH_PASS}" | docker login -u "${DH_USER}" --password-stdin
                    echo ""
                    echo "Building ${DH_IMAGE} Version \"${BUILD_VER}\""
                    docker build --rm \
                        -f "<< parameters.docker_file >>" \
                        -t "${DH_IMAGE}:${BUILD_VER}" \
                        --progress plain \
                        --target "release" .
                    echo ""
                    echo "Pushing ${DH_IMAGE} Version \"${BUILD_VER}\""
                    docker push "${DH_IMAGE}:${BUILD_VER}"
                    echo ""
                    echo "Cleaning up ${DH_IMAGE} Version \"${BUILD_VER}\""
                    docker rmi "${DH_IMAGE}:${BUILD_VER}"

workflows:
    quality-control:
        jobs:
            - co:
                  filters: { branches: { ignore: [main, auto-update-changelog] } }
            - run-test:
                  context: << pipeline.parameters.ctx_docker >>
                  requires: [ co ]
            - run-img-test:
                  context: << pipeline.parameters.ctx_docker >>
                  requires: [ co ]

    workflow-selector:
        when:
            and:
                - equal: [main, << pipeline.git.branch >>]
                - equal: ["workflow-selector", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vro/workflow-selector:
                context: << pipeline.parameters.ctx_auto_release >>
                ssh_finger: << pipeline.parameters.ssh_finger >>
                exec_img_tag: << pipeline.parameters.exec_img_tag >>

    publish-changelog:
        when:
            and:
                - equal: ["publish-changelog", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vro/publish-changelog:
                context: << pipeline.parameters.ctx_auto_release >>
                ssh_finger: << pipeline.parameters.ssh_finger >>
                exec_img_tag: << pipeline.parameters.exec_img_tag >>

    publish-release-tag:
        when:
            and:
                - equal: ["publish-release-tag", << pipeline.parameters.triggered_flow >>]
        jobs:
            - run-test:
                context: << pipeline.parameters.ctx_docker >>
            - vro/tag-and-release:
                context: << pipeline.parameters.ctx_auto_release >>
                requires: [ run-test ]
                exec_img_tag: << pipeline.parameters.exec_img_tag >>

    on-tag-release:
        jobs:
            - co:
                context: << pipeline.parameters.ctx_docker >>
                filters:
                    <<: *filter-semantic-tag
            - publish-execs:
                context: << pipeline.parameters.ctx_auto_release >>
                filters:
                    <<: *filter-semantic-tag
                app_name: << pipeline.parameters.app_name >>
                requires: [ co ]
            - publish-image:
                name: publish-release-image
                context: << pipeline.parameters.ctx_docker >>
                filters:
                    <<: *filter-semantic-tag
                requires: [ co ]
                ver_tag: << pipeline.git.tag >>
                docker_file: ".docker/go-release/Dockerfile"
                image_repo: << pipeline.parameters.image_repo >>
